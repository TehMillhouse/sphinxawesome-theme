About
=====

This page is a collection of topics about the sphinx awesome theme.

Assets
------

The sphinx awesome theme uses the following external assets.

.. list-table::
   :header-rows: 1

   * - For
     - Name/Website
   * - CSS
     - `Tailwind <https://tailwindcss.com/>`_
   * - fonts
     - `Roboto <https://github.com/googlefonts/roboto>`_
   * - icons for menu and magnifying glass
     - `Entypo <http://www.entypo.com/>`_ by Daniel Bruce
   * - icons for copy buttons in code blocks
     - `Zondicons <http://www.zondicons.com/>`_ by Steve Schoger


Technology
----------

Building the theme involves a few technologies. At the top layer is `Webpack
<https://webpack.js.org/>`_ that ties everything together. The entry point is in
``theme-src/src/theme-src.js`` which includes both all JavaScript functions that provide
some simple interactions in the theme, and all dependencies, such as the fonts and the
styles.

The JavaScript is bundled and minified into the ``sphinxawesome_theme/static/theme.js``,
which will be read by the browser.

The fonts are read from the npm packages ``typeface-roboto`` and
``typeface-roboto-mono``, which both have the web fonts and also create the
``@fontface`` rules for the CSS.

The styles are read from ``theme-src/src/theme-src.css``, which are the basic `tailwind
directives <https://tailwindcss.com/docs/installation#2-add-tailwind-to-your-css>`_. The
file ``theme-src/src/theme-custom.css`` contains all styles for elements that come
directly from Sphinx, such as headings, tables, paragraph text, etc. These files are
processed by `PostCSS <https://postcss.org/>`_ and in particular the `PurgeCSS
<https://purgecss.com/>`_ plugin. This checks the HTML templates and removes unused
classes from the final ``sphinxawesome_theme/static/theme.css`` file.


Modifying
---------

The theme is simple by design. No customization options are provided by the theme. The
hope is that by using a “utility-first” framework like Tailwind and a reasonable layout
of the templates provides an easy enough base for customization of the source itself
rather than complicating the templates.

All styles that are specific to the theme (header, navigation menu, footer, the
*breadcrumbs* links at the top, etc.) are applied via Tailwind's utility classes in the
templates directly. All styles for elements that are generated by Sphinx (everything in
the main content area apart from the breadcrumbs and footer) are applied via Tailwind's
``@apply`` directive in the ``theme-src/src/theme-custom.css`` file.

For example, if you want to change the background color of the header, edit the file
``sphinxawesome_theme/header.html`` and exchange the ``bg-white`` class of the
``<header>`` element with any other `background color
<https://tailwindcss.com/docs/background-color/>`_  class. Then, execute ``yarn build``
or ``npm run build`` in the ``theme-src/`` directory to rebuild the CSS and JavaScript.
