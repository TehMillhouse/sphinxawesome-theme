=====
About
=====

This page contains information about used external assets
as well as topics that didn't really fit anywhere else.


------
Assets
------

The sphinx awesome theme relies on the following external assets.

.. list-table::
   :header-rows: 1

   * - Purpose
     - Name/Website
     - License
   * - CSS framework
     - `Tailwind <https://tailwindcss.com>`_
     - `MIT License <https://github.com/tailwindlabs/tailwindcss/blob/master/LICENSE>`_
   * - fonts
     - `Roboto <https://github.com/googlefonts/roboto>`_
     - `Apache License, Version 2.0`_
   * - icons for menu and magnifying glass
     - `Entypo <http://www.entypo.com>`_ by Daniel Bruce
     - `Creative Commons Attribution-ShareAlike 4.0`_
   * - icons for copy buttons in code blocks
     - `Zondicons <http://www.zondicons.com>`_ by Steve Schoger
     - ? (used until version 1.13.1)
   * - icons
     - `Material icons <https://material.io/resources/icons/>`_
     - `Apache License, Version 2.0`_

.. _Creative Commons Attribution-ShareAlike 4.0: https://creativecommons.org/licenses/by-sa/4.0/legalcode
.. _Apache License, Version 2.0:  https://www.apache.org/licenses/LICENSE-2.0.html

.. vale off

The icons are copied and included as SVG directly in the HTML templates.
The Roboto fonts are bundled in the theme's static directory.

.. vale on


-----------------
How does it work?
-----------------

Sphinx :term:`themes <theme>` are a collection of Jinja2_ templates for the HTML,
CSS styles and JavaScript files.

.. _Jinja2: https://jinja.palletsprojects.com

I wanted to try using the Tailwind_ CSS framework,
which really makes it easy to compose a website such as this
from scratch, but also has its downsides for use in themes.
For example, I can't customize the theme with additional CSS
and JavaScript within Sphinx, as this would require a new
run of Webpack/PurgeCSS.

Sphinx is a very flexible tool, where almost everything can be overridden,
or new logic be added. This theme makes extensive use of that fact and
implements a number of improvements at build time, such as better
link titles in "permalinks" or assign IDs to admonitions so that
they can be targets for links as well.

Not everything is as easy as it could be.
Sphinx relies on the Docutils_ project
for the transformation of reStructuredText sources to HTML.
The HTML generated by Docutils is often needlessly nested and
does not include semantic elements like ``<section>`` or ``<figure>``. [#]_
To change that, one would essentially have to re-implement a large
part of the HTML writer from Docutils and remember to re-apply all
modifications made by Sphinx as well.
This theme follows a different approach. The HTML is modified after
everything has been built using BeautifulSoup_.

.. _Docutils: https://docutils.sourceforge.io/
.. _BeautifulSoup: https://www.crummy.com/software/BeautifulSoup/


------------------------------
Package and project management
------------------------------

The project is distributed as a Python package. Three tools are vital in order to achieve this:

- `Poetry <https://python-poetry.org/>`_
- `Nox <https://nox.thea.codes/en/stable/>`_
- `pre-commit <https://https://pre-commit.com/>`_

Poetry is a Python package manager, that uses a :file:`pyproject.toml` file to declare
all the project's dependencies, and is used to build the package and upload it to PyPI.

Nox is an automation tool that is used to perform various tests and checks, as well as
building the documentation.

Pre-commit is a tool, that runs configurable checks on every ``git commit``.

The JavaScript and CSS portions of the theme are managed by Webpack_.
The entry point for Webpack is the file `app.js`_.
In this file, all dependencies are imported (including fonts and CSS styles)
and the custom JavaScript functions are defined.
The Webpack configuration `webpack.config.js`_ instructs Webpack
how to process the CSS, JavaScript, and fonts.
The JavaScript is checked with ESLint_ minified and put in the output directory.
This file is read and executed by the browser.
The fonts are imported from ``npm`` packages and also copied to the output directory.

The CSS is checked with stylelint_ and passed through PostCSS_,
which enables a few plugins,
defined in the configuration file `postcss.config.js`_.
The most important PostCSS plugins are Tailwind_ and PurgeCSS_.
Tailwind defines a lot of classes for consistent styling and
easy composition, at the cost of a large output CSS file if left
unprocessed. PurgeCSS goes through all CSS files and HTML templates
and removes from the final CSS all Tailwind classes that aren't used.
For example, if the theme never uses any ``text-purple-*`` classes,
they will not appear in the final output,
thus greatly reducing the final size of the CSS file.


.. _Webpack: https://webpack.js.org
.. _webpack.config.js: https://github.com/kai687/sphinxawesome-theme/blob/master/src/theme-src/webpack.config.js
.. _app.js: https://github.com/kai687/sphinxawesome-theme/blob/master/src/theme-src/app.js
.. _ESLint: https://eslint.org/
.. _stylelint: https://stylelint.io/
.. _PostCSS: https://postcss.org
.. _postcss.config.js: https://github.com/kai687/sphinxawesome-theme/blob/master/src/theme-src/postcss.config.js
.. _Tailwind: https://tailwindcss.com
.. _PurgeCSS: https://purgecss.com


.. [#] At the time of writing this, Sphinx depends on docutils 0.16. Version 0.17 would
       include many of these semantic elements.
